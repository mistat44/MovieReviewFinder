{"version":3,"sources":["components/Spinner/spinner2.gif","components/Navbar.js","components/Spinner/Spinner.js","components/MovieCard.js","config/keys.js","components/InputForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","state","onClick","e","preventDefault","console","log","onChange","_e$target","target","name","value","_this","setState","Object","defineProperty","react_default","a","createElement","className","href","id","rel","style","fontSize","marginRight","class","Component","Spinner","src","spinner","alt","width","margin","display","marginTop","MovieCard","getMovieGenres","searchGenreList","allGenreList","results","i","length","j","push","_this$props","this","props","movie","url","genreContent","genre_ids","genreList","genres","map","genre","key","uuidv1","someKey","someOtherKey","t1","concat","id1","h1","t2","id2","h2","poster_path","title","data-toggle","data-target","aria-expanded","aria-controls","aria-labelledby","data-parent","overview","vote_average","vote_count","TMDbApiKey","InputForm","rating","imdb_id","poster","loading","imgBaseURL","onSubmit","apiKey","fetch","then","res","json","data","catch","err","resultContent","output","_this$state","undefined","components_MovieCard","marginLeft","type","placeholder","App","components_Navbar","components_InputForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cad8923c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner2.584b607f.gif\";","import React, { Component } from 'react';\r\n\r\nclass Navbar extends Component {\r\n    state = {}\r\n\r\n    onClick = e => {\r\n        e.preventDefault();\r\n        // Perform api logic\r\n        console.log('submit')\r\n    }\r\n\r\n    onChange = e => {\r\n        const { name, value } = e.target;\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-dark bg-dark\">\r\n                <div className=\"container\">\r\n                    {/* eslint-disable-next-line */}\r\n                    <a className=\"navbar-brand\"  href=\"/MovieReviewFinder\"><span id=\"real-brand\">Movie Review Finder</span></a>\r\n                    <ul className=\"nav navbar-nav navbar-right\">\r\n                        {/* eslint-disable-next-line */}\r\n                        <li className=\"nav-item\" id=\"github-icon\">\r\n                            <a\r\n                                className=\"nav-item nav-link\"\r\n                                href=\"https://github.com/mistat44/MovieReviewFinder\"                                \r\n                                target=\"_blank\"\r\n                                rel=\"noopener noreferrer\"\r\n                            >\r\n                                <i style={{ fontSize: '1.3rem', marginRight: '3px' }} class=\"fab fa-github\" /> Github\r\n                            </a>\r\n                        </li>\r\n\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React from 'react'\r\nimport spinner from './spinner2.gif'\r\n\r\nexport default function Spinner() {\r\n    return (\r\n        <div>\r\n            <img\r\n                src={spinner}\r\n                alt=\"Loading...\"\r\n                style={{\r\n                    width: '100px',\r\n                    margin: 'auto',\r\n                    display: 'block',\r\n                    marginTop: '1rem'\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport genreList from './genres.json'\r\nimport uuidv1 from 'uuid/v1'\r\n\r\nclass MovieCard extends Component {\r\n    state = {}\r\n\r\n    getMovieGenres = (searchGenreList, allGenreList) => {\r\n        const results = [];\r\n        for (let i = 0; i < searchGenreList.length; i++) {\r\n            for (let j = 0; j < allGenreList.length; j++) {\r\n                if (searchGenreList[i] === allGenreList[j].id) {\r\n                    results.push(allGenreList[j].name)\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n\r\n    render() {\r\n        const { movie, url } = this.props\r\n\r\n        const genres = this.getMovieGenres(movie.genre_ids, genreList.genres)\r\n\r\n        const genreContent = genres.map(genre => <li className=\"list-group-item\" key={uuidv1()}>{genre}</li>)\r\n\r\n        const someKey = uuidv1();\r\n        const someOtherKey = uuidv1();\r\n\r\n        const t1 = `#collapseOne${someKey}`\r\n        const id1 = `collapseOne${someKey}`\r\n        const h1 = `headingOne${someKey}`\r\n\r\n        const t2 = `#collapseTwo${someOtherKey}1`\r\n        const id2 = `collapseTwo${someOtherKey}1`\r\n        const h2 = `headingTwo${someOtherKey}1`\r\n\r\n        return (\r\n            <div className=\"card mx-3 mb-3 pb-0 outer\" id=\"outer-accordion\" >\r\n                <img className=\"card-img-top\" src={url + movie.poster_path} alt=\"\" />\r\n                <div className=\"card-body\">\r\n\r\n                    <h5 className=\"text-center\">{movie.title} </h5>\r\n\r\n                    <div id=\"accordion\">\r\n\r\n                        {/* Overview */}\r\n                        <div className=\"card \">\r\n                            <div className=\"card-header m-0 p-0 \" id={h1}>\r\n                                <button\r\n                                    id=\"no-border-button\"\r\n                                    className=\"btn btn-outline-primary collapsed \"\r\n                                    data-toggle=\"collapse\"\r\n                                    data-target={t1}\r\n                                    aria-expanded=\"true\"\r\n                                    aria-controls={id1}\r\n                                >\r\n                                    Overview\r\n                                </button>\r\n                            </div>\r\n\r\n                            <div id={id1} className=\"collapse\" aria-labelledby={h1}\r\n                                data-parent=\"#accordion\">\r\n                                <div className=\"card-body\">\r\n                                    {movie.overview}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Genres */}\r\n                        <div className=\"card \">\r\n                            <div className=\"card-header m-0 p-0 \" id={h2}>\r\n                                <button\r\n                                    id=\"no-border-button\"\r\n                                    className=\"btn btn-outline-primary collapsed\"\r\n                                    data-toggle=\"collapse\"\r\n                                    data-target={t2}\r\n                                    aria-expanded=\"true\"\r\n                                    aria-controls={id2}\r\n\r\n                                >\r\n                                    Genres\r\n                                </button>\r\n                            </div>\r\n\r\n                            <div id={id2} className=\"collapse\" aria-labelledby={h2}\r\n                                data-parent=\"#accordion\">\r\n                                <div className=\"card-body\">\r\n                                    <ul className=\"list-group\">\r\n                                        {genreContent}\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                        <button href=\"#\" id=\"rating\" className=\"btn btn-primary mb-0 mt-2\">Vote Average: {movie.vote_average}</button>\r\n                    </div>\r\n                    <div className=\"mt-2\">\r\n                        <h6><small>(Votes: {movie.vote_count})</small></h6>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieCard","export const TMDbApiKey = '9ea974456472389d0994c7fd70b47058'","import React, { Component } from 'react'\r\nimport Spinner from './Spinner/Spinner'\r\nimport MovieCard from './MovieCard'\r\n\r\nimport { TMDbApiKey } from '../config/keys'\r\nclass InputForm extends Component {\r\n    state = {\r\n        title: '',\r\n        rating: '',\r\n        imdb_id: '',\r\n        poster: '',\r\n        results: [],\r\n        loading: false,\r\n        imgBaseURL: 'http://image.tmdb.org/t/p/w185/'\r\n    }\r\n\r\n    onSubmit = e => {\r\n        // Prevent default form action\r\n        e.preventDefault();\r\n\r\n        // Not sure if this is the best place to set api keys but we'll roll with it for now\r\n        const apiKey = TMDbApiKey;\r\n\r\n        // Example: https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=Bird%20Box\r\n        this.setState({ loading: true })\r\n        fetch(`https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${this.state.title}`)\r\n            .then(res => res.json())\r\n            .then(data => this.setState({ results: data.results, loading: false }, this.setState({ title: '' })))\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    onChange = e => {\r\n        const { name, value } = e.target;\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    render() {\r\n        const { results, loading, imgBaseURL } = this.state;\r\n        let resultContent;\r\n        let output;\r\n\r\n        // Conditionally rendering results if there are any, otherwise displaying a loading spinner\r\n        if (results !== undefined && results.length > 0) {\r\n            // const fewResults = results.slice(0, 3);\r\n            resultContent = results.map(movie => <MovieCard url={imgBaseURL} key={movie.id} movie={movie} />)\r\n        } else if (results === undefined && !loading) {\r\n            output = (\r\n                <div className=\"text-center\">\r\n                    <h1 className=\"pt-4\">No Movies Found <i style={{ fontSize: '2rem', marginLeft: '5px'}} class=\"far fa-frown-open\"></i></h1>\r\n                </div>\r\n            )\r\n        } else {\r\n            resultContent = null\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12 m-auto\">\r\n                        <form onSubmit={this.onSubmit} className=\"text-white mt-5\">\r\n                            <div className=\"form-group\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"title\"\r\n                                    value={this.state.title}\r\n                                    onChange={this.onChange}\r\n                                    className=\"form-control form-control-lg\"\r\n                                    placeholder=\"Movie Title\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-2 m-auto\">\r\n                                    <button\r\n                                        id=\"submit-button\"\r\n                                        type=\"button\"\r\n                                        onClick={this.onSubmit}\r\n                                        style={{ width: '100%' }}\r\n                                        className=\"btn btn-lg btn-info\"\r\n                                    >\r\n                                        Submit\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                        <br />\r\n                        <hr />\r\n                        {loading && <Spinner />}\r\n                    </div>\r\n                </div>\r\n                {output}\r\n                <div className=\"row mt-3\">\r\n                    <div className=\"outer-accordion\">\r\n                        {resultContent}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InputForm;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Navbar from './components/Navbar'\nimport InputForm from './components/InputForm'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <InputForm />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}